{"ast":null,"code":"import _toConsumableArray from \"/home/a/Desktop/Amazon/amazon/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/a/Desktop/Amazon/amazon/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nexport var initialState = {\n  basket: [],\n  user: null\n};\nexport var getBasketTotal = function getBasketTotal(basket) {\n  return basket?.reduce(function (amount, item) {\n    return item.price + amount;\n  }, 0);\n};\n\nvar reducer = function reducer(state, action) {\n  console.log(action);\n\n  switch (action.type) {\n    case \"SET_USER\":\n      return _objectSpread({}, state, {\n        user: action.user\n      });\n\n    case \"ADD_TO_BASKET\":\n      return _objectSpread({}, state, {\n        //returning the curent state,\n        basket: [].concat(_toConsumableArray(state.basket), [action.item]) //adding the item to the current basket\n\n      });\n\n    case \"REMOVE_FROM_BASKET\":\n      var newBasket = _toConsumableArray(state.basket); //cloned the basket\n      //find index of product id to be removed\n\n\n      var index = state.basket.findIndex(function (basketItem) {\n        return basketItem.id === action.id;\n      });\n\n      if (index >= 0) {\n        //got to index and remove first occurence of that particular id\n        newBasket.splice(index, 1); //items exist in basket\n      } else {\n        console.warn(\"Can't remove\");\n      }\n\n      return _objectSpread({}, state, {\n        basket: newBasket\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/a/Desktop/Amazon/amazon/src/reducer.js"],"names":["initialState","basket","user","getBasketTotal","reduce","amount","item","price","reducer","state","action","console","log","type","newBasket","index","findIndex","basketItem","id","splice","warn"],"mappings":";;AAAA,OAAO,IAAMA,YAAY,GAAC;AACtBC,EAAAA,MAAM,EAAC,EADe;AAEtBC,EAAAA,IAAI,EAAC;AAFiB,CAAnB;AAIP,OAAO,IAAMC,cAAc,GAAC,SAAfA,cAAe,CAACF,MAAD,EAAU;AAClC,SACAA,MAAM,EAAEG,MAAR,CAAe,UAACC,MAAD,EAAQC,IAAR;AAAA,WAAeA,IAAI,CAACC,KAAL,GAAWF,MAA1B;AAAA,GAAf,EAAgD,CAAhD,CADA;AAEH,CAHM;;AAKP,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAOC,MAAP,EAAgB;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,UAAQA,MAAM,CAACG,IAAf;AACI,SAAK,UAAL;AACI,+BACOJ,KADP;AAEIP,QAAAA,IAAI,EAACQ,MAAM,CAACR;AAFhB;;AAIJ,SAAK,eAAL;AACI,+BACOO,KADP;AACa;AACTR,QAAAA,MAAM,+BAAKQ,KAAK,CAACR,MAAX,IAAkBS,MAAM,CAACJ,IAAzB,EAFV,CAEwC;;AAFxC;;AAIJ,SAAK,oBAAL;AACI,UAAIQ,SAAS,sBAAKL,KAAK,CAACR,MAAX,CAAb,CADJ,CACoC;AAChC;;;AACA,UAAMc,KAAK,GAACN,KAAK,CAACR,MAAN,CAAae,SAAb,CAAuB,UAACC,UAAD;AAAA,eAAcA,UAAU,CAACC,EAAX,KAAgBR,MAAM,CAACQ,EAArC;AAAA,OAAvB,CAAZ;;AACA,UAAIH,KAAK,IAAE,CAAX,EACA;AAAI;AACAD,QAAAA,SAAS,CAACK,MAAV,CAAiBJ,KAAjB,EAAuB,CAAvB,EADJ,CAC6B;AAE5B,OAJD,MAKI;AACAJ,QAAAA,OAAO,CAACS,IAAR,CAAa,cAAb;AACH;;AACD,+BAAWX,KAAX;AAAiBR,QAAAA,MAAM,EAACa;AAAxB;;AACJ;AACI,aAAOL,KAAP;AAzBR;AA2BH,CA7BD;;AA8BA,eAAeD,OAAf","sourcesContent":["export const initialState={\r\n    basket:[],\r\n    user:null\r\n}\r\nexport const getBasketTotal=(basket)=>{\r\n    return(\r\n    basket?.reduce((amount,item)=>item.price+amount,0))\r\n}\r\n\r\nconst reducer = (state,action)=>{\r\n    console.log(action);\r\n    switch (action.type) {\r\n        case \"SET_USER\":\r\n            return {\r\n                ...state,\r\n                user:action.user\r\n            }\r\n        case \"ADD_TO_BASKET\":\r\n            return {\r\n                ...state,//returning the curent state,\r\n                basket:[...state.basket,action.item]//adding the item to the current basket\r\n            };\r\n        case \"REMOVE_FROM_BASKET\":\r\n            let newBasket=[...state.basket] //cloned the basket\r\n            //find index of product id to be removed\r\n            const index=state.basket.findIndex((basketItem)=>basketItem.id===action.id)\r\n            if (index>=0)\r\n            {   //got to index and remove first occurence of that particular id\r\n                newBasket.splice(index,1)//items exist in basket\r\n            \r\n            }\r\n            else{\r\n                console.warn(\"Can't remove\")\r\n            }\r\n            return {...state,basket:newBasket}\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default reducer"]},"metadata":{},"sourceType":"module"}